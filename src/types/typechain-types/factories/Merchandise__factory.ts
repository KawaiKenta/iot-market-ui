/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BytesLike,
  BigNumberish,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../common";
import type { Merchandise, MerchandiseInterface } from "../Merchandise";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "dataHash",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "Merchandise__AlreadyPurchased",
    type: "error",
  },
  {
    inputs: [],
    name: "Merchandise__Bunned",
    type: "error",
  },
  {
    inputs: [],
    name: "Merchandise__NotBuyer",
    type: "error",
  },
  {
    inputs: [],
    name: "Merchandise__NotEnoughETH",
    type: "error",
  },
  {
    inputs: [],
    name: "Merchandise__NotForSale",
    type: "error",
  },
  {
    inputs: [],
    name: "Merchandise__NotInProgress",
    type: "error",
  },
  {
    inputs: [],
    name: "Merchandise__NotOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "Merchandise__WithdrawFailed",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "buyer",
        type: "address",
      },
    ],
    name: "Purchase",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "buyer",
        type: "address",
      },
      {
        indexed: true,
        internalType: "string",
        name: "uri",
        type: "string",
      },
    ],
    name: "Upload",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "buyer",
        type: "address",
      },
      {
        indexed: true,
        internalType: "bool",
        name: "result",
        type: "bool",
      },
    ],
    name: "Verify",
    type: "event",
  },
  {
    inputs: [],
    name: "RETRY_LIMIT",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "encryptURI",
        type: "string",
      },
    ],
    name: "emitUpload",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getDataHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getProgressBuyer",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRetryLimit",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "getState",
    outputs: [
      {
        internalType: "enum Merchandise.MerchandiseState",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getTrialCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "i_price",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "buyer",
        type: "address",
      },
    ],
    name: "isConfirmedBuyer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "purchase",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "s_confirmedBuyers",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "s_merchandiseState",
    outputs: [
      {
        internalType: "enum Merchandise.MerchandiseState",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "s_progressBuyer",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "s_trialCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "dataHash",
        type: "bytes32",
      },
    ],
    name: "verify",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60c06040526000600160006101000a81548160ff021916908360028111156200002d576200002c620001f4565b5b021790555060006002553480156200004457600080fd5b5060405162001b2938038062001b2983398181016040528101906200006a91906200029e565b3273ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050816000819055508060a08181525050620000d96040518060600160405280602a815260200162001aff602a91393033620000e160201b60201c565b505062000437565b62000185838383604051602401620000fc93929190620003c4565b6040516020818303038152906040527ffcec75e0000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506200018a60201b60201c565b505050565b620001b081620001ab620001b360201b62000eee17620001d460201b60201c565b60201c565b50565b60006a636f6e736f6c652e6c6f679050600080835160208501845afa505050565b620001e860201b62000fd317819050919050565b620001f262000408565b565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600080fd5b6000819050919050565b6200023d8162000228565b81146200024957600080fd5b50565b6000815190506200025d8162000232565b92915050565b6000819050919050565b620002788162000263565b81146200028457600080fd5b50565b60008151905062000298816200026d565b92915050565b60008060408385031215620002b857620002b762000223565b5b6000620002c8858286016200024c565b9250506020620002db8582860162000287565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b60005b838110156200032157808201518184015260208101905062000304565b60008484015250505050565b6000601f19601f8301169050919050565b60006200034b82620002e5565b620003578185620002f0565b93506200036981856020860162000301565b62000374816200032d565b840191505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620003ac826200037f565b9050919050565b620003be816200039f565b82525050565b60006060820190508181036000830152620003e081866200033e565b9050620003f16020830185620003b3565b620004006040830184620003b3565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052605160045260246000fd5b60805160a0516116636200049c600039600081816109c701528181610a850152610ca901526000818161049b0152818161058e0152818161083001528181610a1801528181610bd801528181610c7301528181610cef0152610e3001526116636000f3fe6080604052600436106101095760003560e01c8063893d20e811610095578063b5b5145911610064578063b5b514591461032c578063cfc8430b14610369578063e0ec60d114610392578063e3620600146103bd578063f561836b146103e857610109565b8063893d20e81461028057806398d5fdca146102ab5780639bdf960e146102d6578063a4da22901461030157610109565b80633ccfd60b116100dc5780633ccfd60b146101cc57806356350d1f146101e357806364edfbf01461020e57806375e366161461021857806383e3bf9e1461025557610109565b8063183505a91461010e5780631865c57d1461014b57806334d194691461017657806339099124146101a1575b600080fd5b34801561011a57600080fd5b506101356004803603810190610130919061104f565b610413565b6040516101429190611097565b60405180910390f35b34801561015757600080fd5b50610160610469565b60405161016d9190611129565b60405180910390f35b34801561018257600080fd5b5061018b610480565b604051610198919061115d565b60405180910390f35b3480156101ad57600080fd5b506101b6610486565b6040516101c39190611129565b60405180910390f35b3480156101d857600080fd5b506101e1610499565b005b3480156101ef57600080fd5b506101f8610673565b604051610205919061115d565b60405180910390f35b610216610679565b005b34801561022457600080fd5b5061023f600480360381019061023a91906111ae565b6108b6565b60405161024c9190611097565b60405180910390f35b34801561026157600080fd5b5061026a610c66565b604051610277919061115d565b60405180910390f35b34801561028c57600080fd5b50610295610c6f565b6040516102a291906111ea565b60405180910390f35b3480156102b757600080fd5b506102c0610c97565b6040516102cd919061115d565b60405180910390f35b3480156102e257600080fd5b506102eb610ca0565b6040516102f8919061115d565b60405180910390f35b34801561030d57600080fd5b50610316610ca5565b6040516103239190611214565b60405180910390f35b34801561033857600080fd5b50610353600480360381019061034e919061104f565b610ccd565b6040516103609190611097565b60405180910390f35b34801561037557600080fd5b50610390600480360381019061038b9190611375565b610ced565b005b34801561039e57600080fd5b506103a7610e94565b6040516103b491906111ea565b60405180910390f35b3480156103c957600080fd5b506103d2610ebe565b6040516103df91906111ea565b60405180910390f35b3480156103f457600080fd5b506103fd610ee4565b60405161040a919061115d565b60405180910390f35b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b6000600160009054906101000a900460ff16905090565b60005481565b600160009054906101000a900460ff1681565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461051e576040517f8a52830b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600280811115610531576105306110b2565b5b600160009054906101000a900460ff166002811115610553576105526110b2565b5b0361058a576040517f1766baa500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516105d0906113ef565b60006040518083038185875af1925050503d806000811461060d576040519150601f19603f3d011682016040523d82523d6000602084013e610612565b606091505b505090508061064d576040517fa002905900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610670604051806060016040528060278152602001611607602791393033610f0f565b50565b60025481565b6000600281111561068d5761068c6110b2565b5b600160009054906101000a900460ff1660028111156106af576106ae6110b2565b5b146106e6576040517f3808184600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600054341015610722576040517f9c83fe7400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60011515600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515036107ac576040517f5fbafb8b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018060006101000a81548160ff021916908360028111156107d1576107d06110b2565b5b021790555033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff167f895ee30dc90af28d241649cd395c849101aaa615c472205924bfb75be84a7a2860405160405180910390a36108b46040518060600160405280602781526020016115e0602791393033610f0f565b565b6000600160028111156108cc576108cb6110b2565b5b600160009054906101000a900460ff1660028111156108ee576108ed6110b2565b5b14610925576040517f0d14589200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146109ac576040517f0eb8ee0600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260008154809291906109bf90611433565b9190505550817f0000000000000000000000000000000000000000000000000000000000000000141580156109f65750600a600254105b15610a8257600015153373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff167fd097ce000053ce97ab91fd27d014f308bce1dcc28e97bb7956720989aa0f251060405160405180910390a460009050610c61565b817f000000000000000000000000000000000000000000000000000000000000000014158015610ab55750600a60025410155b15610aee576002600160006101000a81548160ff02191690836002811115610ae057610adf6110b2565b5b021790555060009050610c61565b6000600160006101000a81548160ff02191690836002811115610b1457610b136110b2565b5b021790555060006002819055506000600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600115153373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff167fd097ce000053ce97ab91fd27d014f308bce1dcc28e97bb7956720989aa0f251060405160405180910390a4610c5c6040518060600160405280602581526020016115bb602591393033610f0f565b600190505b919050565b6000600a905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008054905090565b600a81565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60046020528060005260406000206000915054906101000a900460ff1681565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610d72576040517f8a52830b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60016002811115610d8657610d856110b2565b5b600160009054906101000a900460ff166002811115610da857610da76110b2565b5b14610ddf576040517f0d14589200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80604051610ded91906114ec565b6040518091039020600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff167f05f287e30d29b97a5ad15563cbd028af0e0178d4f5a32ff285a815e4bf5c632660405160405180910390a450565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600254905090565b60006a636f6e736f6c652e6c6f679050600080835160208501845afa505050565b610fa9838383604051602401610f279392919061154d565b6040516020818303038152906040527ffcec75e0000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610fae565b505050565b610fc581610fbd610eee610fc8565b63ffffffff16565b50565b610fd3819050919050565b610fdb61158b565b565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061101c82610ff1565b9050919050565b61102c81611011565b811461103757600080fd5b50565b60008135905061104981611023565b92915050565b60006020828403121561106557611064610fe7565b5b60006110738482850161103a565b91505092915050565b60008115159050919050565b6110918161107c565b82525050565b60006020820190506110ac6000830184611088565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600381106110f2576110f16110b2565b5b50565b6000819050611103826110e1565b919050565b6000611113826110f5565b9050919050565b61112381611108565b82525050565b600060208201905061113e600083018461111a565b92915050565b6000819050919050565b61115781611144565b82525050565b6000602082019050611172600083018461114e565b92915050565b6000819050919050565b61118b81611178565b811461119657600080fd5b50565b6000813590506111a881611182565b92915050565b6000602082840312156111c4576111c3610fe7565b5b60006111d284828501611199565b91505092915050565b6111e481611011565b82525050565b60006020820190506111ff60008301846111db565b92915050565b61120e81611178565b82525050565b60006020820190506112296000830184611205565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61128282611239565b810181811067ffffffffffffffff821117156112a1576112a061124a565b5b80604052505050565b60006112b4610fdd565b90506112c08282611279565b919050565b600067ffffffffffffffff8211156112e0576112df61124a565b5b6112e982611239565b9050602081019050919050565b82818337600083830152505050565b6000611318611313846112c5565b6112aa565b90508281526020810184848401111561133457611333611234565b5b61133f8482856112f6565b509392505050565b600082601f83011261135c5761135b61122f565b5b813561136c848260208601611305565b91505092915050565b60006020828403121561138b5761138a610fe7565b5b600082013567ffffffffffffffff8111156113a9576113a8610fec565b5b6113b584828501611347565b91505092915050565b600081905092915050565b50565b60006113d96000836113be565b91506113e4826113c9565b600082019050919050565b60006113fa826113cc565b9150819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061143e82611144565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036114705761146f611404565b5b600182019050919050565b600081519050919050565b600081905092915050565b60005b838110156114af578082015181840152602081019050611494565b60008484015250505050565b60006114c68261147b565b6114d08185611486565b93506114e0818560208601611491565b80840191505092915050565b60006114f882846114bb565b915081905092915050565b600082825260208201905092915050565b600061151f8261147b565b6115298185611503565b9350611539818560208601611491565b61154281611239565b840191505092915050565b600060608201905081810360008301526115678186611514565b905061157660208301856111db565b61158360408301846111db565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052605160045260246000fdfe7665726966792069732063616c6c65643a20616464726573733a25732c2063616c6c3a257370757263686173652069732063616c6c65643a20616464726573733a25732c2063616c6c3a257377697468647261772069732063616c6c65643a20616464726573733a25732c2063616c6c3a2573a2646970667358221220d591fe91e0fa5616e61371b3f7db3366bfd3d79322de9c4a61de2c96417bc42b64736f6c63430008130033636f6e7374727563746f722069732063616c6c65643a20616464726573733a25732c2063616c6c3a2573";

type MerchandiseConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MerchandiseConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Merchandise__factory extends ContractFactory {
  constructor(...args: MerchandiseConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    price: BigNumberish,
    dataHash: BytesLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(price, dataHash, overrides || {});
  }
  override deploy(
    price: BigNumberish,
    dataHash: BytesLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(price, dataHash, overrides || {}) as Promise<
      Merchandise & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Merchandise__factory {
    return super.connect(runner) as Merchandise__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MerchandiseInterface {
    return new Interface(_abi) as MerchandiseInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Merchandise {
    return new Contract(address, _abi, runner) as unknown as Merchandise;
  }
}
