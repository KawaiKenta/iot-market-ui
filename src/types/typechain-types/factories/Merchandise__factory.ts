/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BytesLike,
  BigNumberish,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../common";
import type { Merchandise, MerchandiseInterface } from "../Merchandise";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "dataHash",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "Merchandise__AlreadyPurchased",
    type: "error",
  },
  {
    inputs: [],
    name: "Merchandise__Bunned",
    type: "error",
  },
  {
    inputs: [],
    name: "Merchandise__NotBuyer",
    type: "error",
  },
  {
    inputs: [],
    name: "Merchandise__NotEnoughETH",
    type: "error",
  },
  {
    inputs: [],
    name: "Merchandise__NotForSale",
    type: "error",
  },
  {
    inputs: [],
    name: "Merchandise__NotInProgress",
    type: "error",
  },
  {
    inputs: [],
    name: "Merchandise__NotOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "Merchandise__WithdrawFailed",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "buyer",
        type: "address",
      },
    ],
    name: "Purchase",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "buyer",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "result",
        type: "bool",
      },
    ],
    name: "Verify",
    type: "event",
  },
  {
    inputs: [],
    name: "RETRY_LIMIT",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getDataHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getProgressBuyer",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRetryLimit",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "getState",
    outputs: [
      {
        internalType: "enum Merchandise.MerchandiseState",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getTrialCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "i_price",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "buyer",
        type: "address",
      },
    ],
    name: "isConfirmedBuyer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "purchase",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "s_confirmedBuyers",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "s_merchandiseState",
    outputs: [
      {
        internalType: "enum Merchandise.MerchandiseState",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "s_progressBuyer",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "s_trialCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "dataHash",
        type: "bytes32",
      },
    ],
    name: "verify",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60c06040526000600160006101000a81548160ff021916908360028111156200002d576200002c620000b5565b5b021790555060006002553480156200004457600080fd5b50604051620011c9380380620011c983398181016040528101906200006a91906200015f565b3273ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050816000819055508060a081815250505050620001a6565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600080fd5b6000819050919050565b620000fe81620000e9565b81146200010a57600080fd5b50565b6000815190506200011e81620000f3565b92915050565b6000819050919050565b620001398162000124565b81146200014557600080fd5b50565b60008151905062000159816200012e565b92915050565b60008060408385031215620001795762000178620000e4565b5b600062000189858286016200010d565b92505060206200019c8582860162000148565b9150509250929050565b60805160a051610fcc620001fd60003960008181610937015281816109f90152610bf801526000818161045301528181610546015281816107c50152818161098401528181610b440152610bc20152610fcc6000f3fe6080604052600436106100fe5760003560e01c806383e3bf9e11610095578063a4da229011610064578063a4da2290146102e2578063b5b514591461030d578063e0ec60d11461034a578063e362060014610375578063f561836b146103a0576100fe565b806383e3bf9e14610236578063893d20e81461026157806398d5fdca1461028c5780639bdf960e146102b7576100fe565b80633ccfd60b116100d15780633ccfd60b146101c157806356350d1f146101d857806364edfbf01461020357806375e366161461020d576100fe565b8063183505a9146101035780631865c57d1461014057806334d194691461016b5780633909912414610196575b600080fd5b34801561010f57600080fd5b5061012a60048036038101906101259190610cf9565b6103cb565b6040516101379190610d41565b60405180910390f35b34801561014c57600080fd5b50610155610421565b6040516101629190610dd3565b60405180910390f35b34801561017757600080fd5b50610180610438565b60405161018d9190610e07565b60405180910390f35b3480156101a257600080fd5b506101ab61043e565b6040516101b89190610dd3565b60405180910390f35b3480156101cd57600080fd5b506101d6610451565b005b3480156101e457600080fd5b506101ed610608565b6040516101fa9190610e07565b60405180910390f35b61020b61060e565b005b34801561021957600080fd5b50610234600480360381019061022f9190610e58565b610828565b005b34801561024257600080fd5b5061024b610bb5565b6040516102589190610e07565b60405180910390f35b34801561026d57600080fd5b50610276610bbe565b6040516102839190610e94565b60405180910390f35b34801561029857600080fd5b506102a1610be6565b6040516102ae9190610e07565b60405180910390f35b3480156102c357600080fd5b506102cc610bef565b6040516102d99190610e07565b60405180910390f35b3480156102ee57600080fd5b506102f7610bf4565b6040516103049190610ebe565b60405180910390f35b34801561031957600080fd5b50610334600480360381019061032f9190610cf9565b610c1c565b6040516103419190610d41565b60405180910390f35b34801561035657600080fd5b5061035f610c3c565b60405161036c9190610e94565b60405180910390f35b34801561038157600080fd5b5061038a610c66565b6040516103979190610e94565b60405180910390f35b3480156103ac57600080fd5b506103b5610c8c565b6040516103c29190610e07565b60405180910390f35b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b6000600160009054906101000a900460ff16905090565b60005481565b600160009054906101000a900460ff1681565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104d6576040517f8a52830b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002808111156104e9576104e8610d5c565b5b600160009054906101000a900460ff16600281111561050b5761050a610d5c565b5b03610542576040517f1766baa500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161058890610f0a565b60006040518083038185875af1925050503d80600081146105c5576040519150601f19603f3d011682016040523d82523d6000602084013e6105ca565b606091505b5050905080610605576040517fa002905900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b60025481565b6000600281111561062257610621610d5c565b5b600160009054906101000a900460ff16600281111561064457610643610d5c565b5b1461067b576040517f3808184600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000543410156106b7576040517f9c83fe7400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60011515600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151503610741576040517f5fbafb8b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018060006101000a81548160ff0219169083600281111561076657610765610d5c565b5b021790555033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff167f895ee30dc90af28d241649cd395c849101aaa615c472205924bfb75be84a7a2860405160405180910390a3565b6001600281111561083c5761083b610d5c565b5b600160009054906101000a900460ff16600281111561085e5761085d610d5c565b5b14610895576040517f0d14589200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461091c576040517f0eb8ee0600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600081548092919061092f90610f4e565b9190505550807f0000000000000000000000000000000000000000000000000000000000000000141580156109665750600a600254105b156109f6573373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff167fd097ce000053ce97ab91fd27d014f308bce1dcc28e97bb7956720989aa0f251060006040516109e99190610d41565b60405180910390a3610bb2565b807f000000000000000000000000000000000000000000000000000000000000000014158015610a295750600a60025410155b15610a5e576002600160006101000a81548160ff02191690836002811115610a5457610a53610d5c565b5b0217905550610bb2565b6000600160006101000a81548160ff02191690836002811115610a8457610a83610d5c565b5b021790555060006002819055506000600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff167fd097ce000053ce97ab91fd27d014f308bce1dcc28e97bb7956720989aa0f25106001604051610ba99190610d41565b60405180910390a35b50565b6000600a905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008054905090565b600a81565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60046020528060005260406000206000915054906101000a900460ff1681565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600254905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610cc682610c9b565b9050919050565b610cd681610cbb565b8114610ce157600080fd5b50565b600081359050610cf381610ccd565b92915050565b600060208284031215610d0f57610d0e610c96565b5b6000610d1d84828501610ce4565b91505092915050565b60008115159050919050565b610d3b81610d26565b82525050565b6000602082019050610d566000830184610d32565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60038110610d9c57610d9b610d5c565b5b50565b6000819050610dad82610d8b565b919050565b6000610dbd82610d9f565b9050919050565b610dcd81610db2565b82525050565b6000602082019050610de86000830184610dc4565b92915050565b6000819050919050565b610e0181610dee565b82525050565b6000602082019050610e1c6000830184610df8565b92915050565b6000819050919050565b610e3581610e22565b8114610e4057600080fd5b50565b600081359050610e5281610e2c565b92915050565b600060208284031215610e6e57610e6d610c96565b5b6000610e7c84828501610e43565b91505092915050565b610e8e81610cbb565b82525050565b6000602082019050610ea96000830184610e85565b92915050565b610eb881610e22565b82525050565b6000602082019050610ed36000830184610eaf565b92915050565b600081905092915050565b50565b6000610ef4600083610ed9565b9150610eff82610ee4565b600082019050919050565b6000610f1582610ee7565b9150819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610f5982610dee565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610f8b57610f8a610f1f565b5b60018201905091905056fea2646970667358221220d29a657eec2e501e8dccfffd5009a429fc997bd1f6b6128dff583684d07a41d764736f6c63430008130033";

type MerchandiseConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MerchandiseConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Merchandise__factory extends ContractFactory {
  constructor(...args: MerchandiseConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    price: BigNumberish,
    dataHash: BytesLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(price, dataHash, overrides || {});
  }
  override deploy(
    price: BigNumberish,
    dataHash: BytesLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(price, dataHash, overrides || {}) as Promise<
      Merchandise & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Merchandise__factory {
    return super.connect(runner) as Merchandise__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MerchandiseInterface {
    return new Interface(_abi) as MerchandiseInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Merchandise {
    return new Contract(address, _abi, runner) as unknown as Merchandise;
  }
}
