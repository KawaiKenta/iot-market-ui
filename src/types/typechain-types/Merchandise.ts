/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type KeyValuePairStruct = { key: string; value: string };

export type KeyValuePairStructOutput = [key: string, value: string] & {
  key: string;
  value: string;
};

export interface MerchandiseInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "RETRY_LIMIT"
      | "emitUpload"
      | "getAllAdditionalInfo"
      | "getDataHash"
      | "getOwner"
      | "getPrice"
      | "getProgressBuyer"
      | "getPubKeyAddress"
      | "getRetryLimit"
      | "getState"
      | "getTrialCount"
      | "isConfirmedBuyer"
      | "purchase"
      | "s_confirmedBuyers"
      | "s_merchandiseState"
      | "verify"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "Purchase" | "Upload" | "Verify"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "RETRY_LIMIT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "emitUpload", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getAllAdditionalInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDataHash",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getOwner", values?: undefined): string;
  encodeFunctionData(functionFragment: "getPrice", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getProgressBuyer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPubKeyAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRetryLimit",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getState", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getTrialCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isConfirmedBuyer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "purchase", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "s_confirmedBuyers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "s_merchandiseState",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "verify", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "RETRY_LIMIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "emitUpload", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllAdditionalInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDataHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getProgressBuyer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPubKeyAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRetryLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getState", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTrialCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isConfirmedBuyer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "purchase", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "s_confirmedBuyers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_merchandiseState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace PurchaseEvent {
  export type InputTuple = [
    owner: AddressLike,
    buyer: AddressLike,
    pubkey: string
  ];
  export type OutputTuple = [owner: string, buyer: string, pubkey: string];
  export interface OutputObject {
    owner: string;
    buyer: string;
    pubkey: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UploadEvent {
  export type InputTuple = [
    owner: AddressLike,
    buyer: AddressLike,
    uri: string
  ];
  export type OutputTuple = [owner: string, buyer: string, uri: string];
  export interface OutputObject {
    owner: string;
    buyer: string;
    uri: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VerifyEvent {
  export type InputTuple = [
    owner: AddressLike,
    buyer: AddressLike,
    result: boolean
  ];
  export type OutputTuple = [owner: string, buyer: string, result: boolean];
  export interface OutputObject {
    owner: string;
    buyer: string;
    result: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Merchandise extends BaseContract {
  connect(runner?: ContractRunner | null): Merchandise;
  waitForDeployment(): Promise<this>;

  interface: MerchandiseInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  RETRY_LIMIT: TypedContractMethod<[], [bigint], "view">;

  emitUpload: TypedContractMethod<[encryptURI: string], [void], "nonpayable">;

  getAllAdditionalInfo: TypedContractMethod<
    [],
    [KeyValuePairStructOutput[]],
    "view"
  >;

  getDataHash: TypedContractMethod<[], [string], "view">;

  getOwner: TypedContractMethod<[], [string], "view">;

  getPrice: TypedContractMethod<[], [bigint], "view">;

  getProgressBuyer: TypedContractMethod<[], [string], "view">;

  getPubKeyAddress: TypedContractMethod<[], [string], "view">;

  getRetryLimit: TypedContractMethod<[], [bigint], "view">;

  getState: TypedContractMethod<[], [bigint], "view">;

  getTrialCount: TypedContractMethod<[], [bigint], "view">;

  isConfirmedBuyer: TypedContractMethod<
    [buyer: AddressLike],
    [boolean],
    "view"
  >;

  purchase: TypedContractMethod<[], [void], "payable">;

  s_confirmedBuyers: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  s_merchandiseState: TypedContractMethod<[], [bigint], "view">;

  verify: TypedContractMethod<[dataHash: BytesLike], [boolean], "nonpayable">;

  withdraw: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "RETRY_LIMIT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "emitUpload"
  ): TypedContractMethod<[encryptURI: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAllAdditionalInfo"
  ): TypedContractMethod<[], [KeyValuePairStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getDataHash"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getProgressBuyer"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getPubKeyAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getRetryLimit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getState"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTrialCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "isConfirmedBuyer"
  ): TypedContractMethod<[buyer: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "purchase"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "s_confirmedBuyers"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "s_merchandiseState"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "verify"
  ): TypedContractMethod<[dataHash: BytesLike], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "Purchase"
  ): TypedContractEvent<
    PurchaseEvent.InputTuple,
    PurchaseEvent.OutputTuple,
    PurchaseEvent.OutputObject
  >;
  getEvent(
    key: "Upload"
  ): TypedContractEvent<
    UploadEvent.InputTuple,
    UploadEvent.OutputTuple,
    UploadEvent.OutputObject
  >;
  getEvent(
    key: "Verify"
  ): TypedContractEvent<
    VerifyEvent.InputTuple,
    VerifyEvent.OutputTuple,
    VerifyEvent.OutputObject
  >;

  filters: {
    "Purchase(address,address,string)": TypedContractEvent<
      PurchaseEvent.InputTuple,
      PurchaseEvent.OutputTuple,
      PurchaseEvent.OutputObject
    >;
    Purchase: TypedContractEvent<
      PurchaseEvent.InputTuple,
      PurchaseEvent.OutputTuple,
      PurchaseEvent.OutputObject
    >;

    "Upload(address,address,string)": TypedContractEvent<
      UploadEvent.InputTuple,
      UploadEvent.OutputTuple,
      UploadEvent.OutputObject
    >;
    Upload: TypedContractEvent<
      UploadEvent.InputTuple,
      UploadEvent.OutputTuple,
      UploadEvent.OutputObject
    >;

    "Verify(address,address,bool)": TypedContractEvent<
      VerifyEvent.InputTuple,
      VerifyEvent.OutputTuple,
      VerifyEvent.OutputObject
    >;
    Verify: TypedContractEvent<
      VerifyEvent.InputTuple,
      VerifyEvent.OutputTuple,
      VerifyEvent.OutputObject
    >;
  };
}
